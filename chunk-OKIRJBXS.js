var S=Object.defineProperty;var p=Object.getOwnPropertySymbols;var y=Object.prototype.hasOwnProperty,A=Object.prototype.propertyIsEnumerable;var U=(s,e,t)=>e in s?S(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t,u=(s,e)=>{for(var t in e||={})y.call(e,t)&&U(s,t,e[t]);if(p)for(var t of p(e))A.call(e,t)&&U(s,t,e[t]);return s};var d=(s,e,t)=>new Promise((r,i)=>{var c=n=>{try{o(t.next(n))}catch(l){i(l)}},a=n=>{try{o(t.throw(n))}catch(l){i(l)}},o=n=>n.done?r(n.value):Promise.resolve(n.value).then(c,a);o((t=t.apply(s,e)).next())});import{inject as O,signal as g,effect as v}from"@angular/core";import{Auth as b,signInWithPopup as N,GoogleAuthProvider as h,signInWithCredential as I,signOut as k,authState as j}from"@angular/fire/auth";import*as f from"@angular/core";var m=class s{auth=O(b);user$=j(this.auth);accounts=g(this.loadAccounts());activeUser=g(this.loadActiveUser());constructor(){v(()=>this.saveAccounts(this.accounts())),v(()=>this.saveActiveUser(this.activeUser()))}loginWithGoogle(){return d(this,null,function*(){let e=new h;e.setCustomParameters({prompt:"select_account"});let t=yield N(this.auth,e),r=t.user,i=h.credentialFromResult(t),c=i?JSON.stringify({idToken:i.idToken,accessToken:i.accessToken}):void 0,a={uid:r.uid,displayName:r.displayName,email:r.email,photoURL:r.photoURL,credential:c};return this.addAccount(a),this.activeUser.set(a),r})}addAccount(e){let t=this.accounts().findIndex(r=>r.uid===e.uid);t>=0?this.accounts.update(r=>{let i=[...r];return i[t]=u(u({},i[t]),e),i}):this.accounts.update(r=>[...r,e])}switchAccount(e){return d(this,null,function*(){let t=this.accounts().find(r=>r.uid===e);if(!t)return Promise.reject("User not found");try{if(t.credential){let r=JSON.parse(t.credential),i=h.credential(r.idToken,r.accessToken),c=yield I(this.auth,i);return this.activeUser.set(t),c.user}}catch{console.warn("Cached credential expired, falling back to popup")}return this.loginWithGoogle()})}logout(){return this.activeUser.set(null),k(this.auth)}currentUser(){return this.activeUser()}saveAccounts(e){localStorage.setItem("accounts",JSON.stringify(e))}saveActiveUser(e){localStorage.setItem("activeUser",e?JSON.stringify(e):"null")}loadAccounts(){try{return JSON.parse(localStorage.getItem("accounts")??"[]")}catch{return[]}}loadActiveUser(){try{return JSON.parse(localStorage.getItem("activeUser")??"null")}catch{return null}}authorizationHeader(){let e=this.activeUser();if(e&&e.credential)try{return`Bearer ${JSON.parse(e.credential).idToken}`}catch{return null}return null}static \u0275fac=function(t){return new(t||s)};static \u0275prov=f.\u0275\u0275defineInjectable({token:s,factory:s.\u0275fac,providedIn:"root"})};export{d as a,m as b};
