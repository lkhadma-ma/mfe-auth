var S=Object.defineProperty;var g=Object.getOwnPropertySymbols;var y=Object.prototype.hasOwnProperty,w=Object.prototype.propertyIsEnumerable;var p=(n,e,t)=>e in n?S(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t,d=(n,e)=>{for(var t in e||={})y.call(e,t)&&p(n,t,e[t]);if(g)for(var t of g(e))w.call(e,t)&&p(n,t,e[t]);return n};var l=(n,e,t)=>new Promise((r,o)=>{var i=s=>{try{a(t.next(s))}catch(u){o(u)}},c=s=>{try{a(t.throw(s))}catch(u){o(u)}},a=s=>s.done?r(s.value):Promise.resolve(s.value).then(i,c);a((t=t.apply(n,e)).next())});import{inject as k,signal as v,effect as m}from"@angular/core";import{Auth as I,signInWithPopup as b,GoogleAuthProvider as h,signInWithCredential as A,signOut as N,authState as T}from"@angular/fire/auth";import*as U from"@angular/core";var f=class n{auth=k(I);GSI_CLIENT_ID="21675652332-t3tnud7hssn9qsmpka13evv46001nvn7.apps.googleusercontent.com";user$=T(this.auth);accounts=v(this.loadAccounts());activeUser=v(this.loadActiveUser());constructor(){m(()=>this.saveAccounts(this.accounts())),m(()=>this.saveActiveUser(this.activeUser()))}loginWithGoogle(){return l(this,null,function*(){let e=new h;e.addScope("https://www.googleapis.com/auth/drive.file"),e.setCustomParameters({prompt:"consent select_account",access_type:"offline"});let t=yield b(this.auth,e),r=t.user,o=h.credentialFromResult(t),i=o?JSON.stringify({idToken:o.idToken,accessToken:o.accessToken}):void 0,c={uid:r.uid,displayName:r.displayName,email:r.email,photoURL:r.photoURL,credential:i};this.addAccount(c),this.activeUser.set(c),this.linkGoogleDrive().then(()=>r).catch(a=>{console.error("Failed to link Google Drive:",a),new Error("Failed to link Google Drive")})})}addAccount(e){let t=this.accounts().findIndex(r=>r.uid===e.uid);t>=0?this.accounts.update(r=>{let o=[...r];return o[t]=d(d({},o[t]),e),o}):this.accounts.update(r=>[...r,e])}switchAccount(e){return l(this,null,function*(){let t=this.accounts().find(r=>r.uid===e);if(!t)return Promise.reject("User not found");try{if(t.credential){let r=JSON.parse(t.credential),o=h.credential(r.idToken,r.accessToken),i=yield A(this.auth,o);return this.activeUser.set(t),i.user}}catch{console.warn("Cached credential expired, falling back to popup")}return this.loginWithGoogle()})}logout(){return this.activeUser.set(null),N(this.auth)}currentUser(){return this.activeUser()}saveAccounts(e){localStorage.setItem("accounts",JSON.stringify(e))}saveActiveUser(e){localStorage.setItem("activeUser",e?JSON.stringify(e):"null")}loadAccounts(){try{return JSON.parse(localStorage.getItem("accounts")??"[]")}catch{return[]}}loadActiveUser(){try{return JSON.parse(localStorage.getItem("activeUser")??"null")}catch{return null}}authorizationHeader(){return l(this,null,function*(){let e=this.auth.currentUser;return e?`Bearer ${yield e.getIdToken(!0)}`:null})}linkGoogleDrive(){return l(this,null,function*(){let e=yield this.authorizationHeader();if(!e)throw new Error("User not authenticated with Firebase.");return new Promise((t,r)=>{try{google.accounts.oauth2.initCodeClient({client_id:this.GSI_CLIENT_ID,scope:"https://www.googleapis.com/auth/drive.file",ux_mode:"popup",callback:i=>l(this,null,function*(){let{code:c}=i,a=yield fetch("http://localhost:8081/mbe-auth/api/google/exchange-code",{method:"POST",headers:{"Content-Type":"application/json",Authorization:e},body:JSON.stringify({authorizationCode:c})});if(!a.ok){let s=yield a.text();throw new Error(`Backend code exchange failed: ${s}`)}console.log("Google Drive linked successfully!"),t()}),error_callback:i=>{console.error("GSI Error:",i),r(new Error("Google Sign-In failed."))}}).requestCode()}catch(o){r(o)}})})}static \u0275fac=function(t){return new(t||n)};static \u0275prov=U.\u0275\u0275defineInjectable({token:n,factory:n.\u0275fac,providedIn:"root"})};export{l as a,f as b};
