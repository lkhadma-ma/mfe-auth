var S=Object.defineProperty;var p=Object.getOwnPropertySymbols;var y=Object.prototype.hasOwnProperty,k=Object.prototype.propertyIsEnumerable;var g=(s,e,t)=>e in s?S(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t,d=(s,e)=>{for(var t in e||={})y.call(e,t)&&g(s,t,e[t]);if(p)for(var t of p(e))k.call(e,t)&&g(s,t,e[t]);return s};var u=(s,e,t)=>new Promise((r,n)=>{var a=o=>{try{i(t.next(o))}catch(l){n(l)}},c=o=>{try{i(t.throw(o))}catch(l){n(l)}},i=o=>o.done?r(o.value):Promise.resolve(o.value).then(a,c);i((t=t.apply(s,e)).next())});import{inject as A,signal as U,effect as f}from"@angular/core";import{Auth as T,signInWithPopup as b,GoogleAuthProvider as h,signInWithCredential as w,signOut as I,authState as N}from"@angular/fire/auth";import*as m from"@angular/core";var v=class s{auth=A(T);user$=N(this.auth);accounts=U(this.loadAccounts());activeUser=U(this.loadActiveUser());constructor(){f(()=>this.saveAccounts(this.accounts())),f(()=>this.saveActiveUser(this.activeUser()))}loginWithGoogle(){return u(this,null,function*(){let e=new h;e.addScope("https://www.googleapis.com/auth/drive.file"),e.setCustomParameters({prompt:"consent select_account",access_type:"offline"});let t=yield b(this.auth,e),r=t.user,n=h.credentialFromResult(t),a=n?JSON.stringify({idToken:n.idToken,accessToken:n.accessToken}):void 0,c={uid:r.uid,displayName:r.displayName,email:r.email,photoURL:r.photoURL,credential:a};this.addAccount(c),this.activeUser.set(c);let i=t._tokenResponse?.refreshToken,o=(yield this.authorizationHeader())||"";return i&&(yield fetch("http://localhost:8081/mbe-auth/api/google/oauth",{method:"POST",headers:{"Content-Type":"application/json",Authorization:o},body:JSON.stringify({refreshToken:i})})),r})}addAccount(e){let t=this.accounts().findIndex(r=>r.uid===e.uid);t>=0?this.accounts.update(r=>{let n=[...r];return n[t]=d(d({},n[t]),e),n}):this.accounts.update(r=>[...r,e])}switchAccount(e){return u(this,null,function*(){let t=this.accounts().find(r=>r.uid===e);if(!t)return Promise.reject("User not found");try{if(t.credential){let r=JSON.parse(t.credential),n=h.credential(r.idToken,r.accessToken),a=yield w(this.auth,n);return this.activeUser.set(t),a.user}}catch{console.warn("Cached credential expired, falling back to popup")}return this.loginWithGoogle()})}logout(){return this.activeUser.set(null),I(this.auth)}currentUser(){return this.activeUser()}saveAccounts(e){localStorage.setItem("accounts",JSON.stringify(e))}saveActiveUser(e){localStorage.setItem("activeUser",e?JSON.stringify(e):"null")}loadAccounts(){try{return JSON.parse(localStorage.getItem("accounts")??"[]")}catch{return[]}}loadActiveUser(){try{return JSON.parse(localStorage.getItem("activeUser")??"null")}catch{return null}}authorizationHeader(){return u(this,null,function*(){let e=this.auth.currentUser;return e?`Bearer ${yield e.getIdToken()}`:null})}static \u0275fac=function(t){return new(t||s)};static \u0275prov=m.\u0275\u0275defineInjectable({token:s,factory:s.\u0275fac,providedIn:"root"})};export{u as a,v as b};
