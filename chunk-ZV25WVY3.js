var n=(o,t,e)=>new Promise((r,a)=>{var v=s=>{try{i(e.next(s))}catch(c){a(c)}},U=s=>{try{i(e.throw(s))}catch(c){a(c)}},i=s=>s.done?r(s.value):Promise.resolve(s.value).then(v,U);i((e=e.apply(o,t)).next())});import{inject as p,signal as u,effect as l}from"@angular/core";import{Auth as m,signInWithPopup as g,GoogleAuthProvider as S,signOut as f,authState as A}from"@angular/fire/auth";import*as h from"@angular/core";var d=class o{auth=p(m);user$=A(this.auth);accounts=u(this.loadAccounts());activeUser=u(this.loadActiveUser());constructor(){l(()=>this.saveAccounts(this.accounts())),l(()=>this.saveActiveUser(this.activeUser()))}loginWithGoogle(){return n(this,null,function*(){let t=new S;t.setCustomParameters({prompt:"select_account"});let r=(yield g(this.auth,t)).user,a={uid:r.uid,displayName:r.displayName,email:r.email,photoURL:r.photoURL};return this.addAccount(a),this.activeUser.set(a),r})}addAccount(t){this.accounts().some(e=>e.uid===t.uid)||this.accounts.update(e=>[...e,t])}switchAccount(t){let e=this.accounts().find(r=>r.uid===t)??null;this.activeUser.set(e)}logout(){return this.activeUser.set(null),f(this.auth)}currentUser(){return this.activeUser()}saveAccounts(t){localStorage.setItem("accounts",JSON.stringify(t))}saveActiveUser(t){localStorage.setItem("activeUser",t?JSON.stringify(t):"null")}loadAccounts(){try{return JSON.parse(localStorage.getItem("accounts")??"[]")}catch{return[]}}loadActiveUser(){try{return JSON.parse(localStorage.getItem("activeUser")??"null")}catch{return null}}static \u0275fac=function(e){return new(e||o)};static \u0275prov=h.\u0275\u0275defineInjectable({token:o,factory:o.\u0275fac,providedIn:"root"})};export{n as a,d as b};
