import{a as c,b as s}from"./chunk-VGWMB74J.js";import{inject as m,signal as d,effect as h}from"@angular/core";import{Auth as U,signInWithPopup as f,GoogleAuthProvider as l,signInWithCredential as S,signOut as y,authState as w}from"@angular/fire/auth";import*as p from"@angular/core";var g=class a{auth=m(U);GSI_CLIENT_ID="21675652332-t3tnud7hssn9qsmpka13evv46001nvn7.apps.googleusercontent.com";user$=w(this.auth);accounts=d(this.loadAccounts());activeUser=d(this.loadActiveUser());constructor(){h(()=>this.saveAccounts(this.accounts())),h(()=>this.saveActiveUser(this.activeUser()))}loginWithGoogle(){return s(this,null,function*(){let e=new l;e.setCustomParameters({prompt:"consent select_account",access_type:"offline"});let r=yield f(this.auth,e),t=r.user,o=l.credentialFromResult(r),n=o?JSON.stringify({idToken:o.idToken,accessToken:o.accessToken}):void 0,i={uid:t.uid,displayName:t.displayName,email:t.email,photoURL:t.photoURL,credential:n};return this.addAccount(i),this.activeUser.set(i),t})}addAccount(e){let r=this.accounts().findIndex(t=>t.uid===e.uid);r>=0?this.accounts.update(t=>{let o=[...t];return o[r]=c(c({},o[r]),e),o}):this.accounts.update(t=>[...t,e])}switchAccount(e){return s(this,null,function*(){let r=this.accounts().find(t=>t.uid===e);if(!r)return Promise.reject("User not found");try{if(r.credential){let t=JSON.parse(r.credential),o=l.credential(t.idToken,t.accessToken),n=yield S(this.auth,o);return this.activeUser.set(r),n.user}}catch{console.warn("Cached credential expired, falling back to popup")}return this.loginWithGoogle()})}logout(){return this.activeUser.set(null),y(this.auth)}currentUser(){return this.activeUser()}saveAccounts(e){localStorage.setItem("accounts",JSON.stringify(e))}saveActiveUser(e){localStorage.setItem("activeUser",e?JSON.stringify(e):"null")}loadAccounts(){try{return JSON.parse(localStorage.getItem("accounts")??"[]")}catch{return[]}}loadActiveUser(){try{return JSON.parse(localStorage.getItem("activeUser")??"null")}catch{return null}}authorizationHeader(){return s(this,null,function*(){let e=this.auth.currentUser;return e?`Bearer ${yield e.getIdToken(!0)}`:null})}linkGoogleDrive(){return s(this,null,function*(){let e=yield this.authorizationHeader();if(!e)throw new Error("User not authenticated with Firebase.");return new Promise((r,t)=>{try{google.accounts.oauth2.initCodeClient({client_id:this.GSI_CLIENT_ID,scope:"https://www.googleapis.com/auth/drive.file",ux_mode:"popup",callback:n=>s(this,null,function*(){let{code:i}=n,u=yield fetch("http://localhost:8081/mbe-mutli-media/api/google/exchange-code",{method:"POST",headers:{"Content-Type":"application/json",Authorization:e},body:JSON.stringify({authorizationCode:i})});if(!u.ok){let v=yield u.text();throw new Error(`Backend code exchange failed: ${v}`)}console.log("Google Drive linked successfully!"),r()}),error_callback:n=>{console.error("GSI Error:",n),t(new Error("Google Sign-In failed."))}}).requestCode()}catch(o){t(o)}})})}static \u0275fac=function(r){return new(r||a)};static \u0275prov=p.\u0275\u0275defineInjectable({token:a,factory:a.\u0275fac,providedIn:"root"})};export{g as a};
